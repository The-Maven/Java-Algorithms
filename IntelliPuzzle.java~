import java.util.ArrayList;
import java.util.Queue;
import java.util.Map;
import java.util.LinkedList;
import java.util.HashMap;

public class IntelliPuzzle {
  
  // Defining scope of edges using enumerations
  public enum Moves {START, NORTH, SOUTH, WEST, EAST};
  
  //  possible results stored in array
  public static String[] possibleResults = {"012345678","123456780"};
  
  // private instance variables
  // store nodes in queue to facilitate breadth-first search
  private Queue<String> puzzleQueue = new LinkedList<String>();
  // let's avoid repeating nodes using this hash map
  private Map<String,Integer> myMap = new HashMap<String, Integer>(); 
  private Map<String, Moves> edges = new HashMap<String, Moves>();
  private String arrivedAtGoal = "";
 
  public static void main(String args[]){
    
  public static Moves[] solve(String initialPosition, String[] goal) {
    IntelliPuzzle smartEight = new IntelliPuzzle();   // New Instance of the EightPuzzle
    
    smartEight.add(initialPosition, 0, Moves.START);        // Add the Initial State
    
    ArrayList<Moves> steps = new ArrayList<Moves>();
    
    boolean arrivedAtGoal = false;
    
    Moves endMove = Moves.START;
    
    
    while(smartEight.puzzleQueue.peek() != null && !arrivedAtGoal){
      
      if (smartEight.north(smartEight.puzzleQueue.peek(), '0', goal)){     // Move the blank space north and add new state to queue
        endMove = Moves.NORTH;
        arrivedAtGoal = true;
      }
      else if (smartEight.south(smartEight.puzzleQueue.peek(), '0', goal)){     // Move the blank space south
        endMove = Moves.SOUTH;
        arrivedAtGoal = true;
      }
      else if (smartEight.west(smartEight.puzzleQueue.peek(), '0', goal)){     // Move west 
        endMove = Moves.WEST;
        arrivedAtGoal = true;
      }
      else if (smartEight.east(smartEight.puzzleQueue.remove(), '0', goal)){    // Move east and remove the current node from Queue
        endMove = Moves.EAST;
        arrivedAtGoal = true;
      }
    }
    if (arrivedAtGoal){
      smartEight.routeOutline(smartEight.arrivedAtGoal, endMove, initialPosition, steps);
    }
    
    // put it in an array
    Moves[] storage = new Moves[steps.size()];
    for (int i=0; i<steps.size(); i++){
      storage[i] = steps.get(i);
    }
    
    return storage;
  }
  
  public static String instructions(Moves a) {
    switch (a) {
      case NORTH:
        return "ABOVE";
      case SOUTH:
        return "BELOW";
      case EAST:
        return "to the EAST of";
      case WEST:
        return "to the WEST of";
      default:
        return "";
    }
  }
  
    
 
  //Add method to add the new string to the Map and Queue
  private void add(String value,int n, Moves a){
    if(!myMap.containsKey(value)){
      myMap.put(value,n);
      edges.put(value,a);
      puzzleQueue.add(value);
    }
  }
  
// take state of board as string, move 0(blank space) and add to hashmap and queue where necessary.
  private String north(String value, char moveThis) {
    int a = value.indexOf(moveThis);
    if(a>2){
      String s = value.substring(0,a-3)+moveThis+value.substring(a-2,a)+value.charAt(a-3)+value.substring(a+1);
      return s;
    }
    else 
      return value;
  }
  
  private boolean north(String value, char moveThis, String[] goal){
    String s = north(value, moveThis);
    if (!s.equals(value)){
      add(s,myMap.get(value)+1, Moves.NORTH);
      for (int i=0; i<goal.length; i++){
        if(s.equals(goal[i])) {
          arrivedAtGoal = goal[i];
          return true;
        }
      }
    }
    return false;
  }
  
  private String south(String value, char moveThis){
    int a = value.indexOf(moveThis);
    if(a<6){
      String s = value.substring(0,a)+value.substring(a+3,a+4)+value.substring(a+1,a+3)+moveThis+value.substring(a+4);
      return s;
    }
    else
      return value;
  }
  
  private boolean south(String value, char moveThis, String[] goal){
    String s = south(value, moveThis);
    if (!s.equals(value)){
      add(s,myMap.get(value)+1,Moves.SOUTH);
      for (int i=0; i<goal.length; i++){
        if(s.equals(goal[i])) {
          arrivedAtGoal = goal[i];
          return true;
        }
      }
    }
    return false;
  }
  
  private String west(String value, char moveThis){
    int a = value.indexOf(moveThis);
    if(a!=0 && a!=3 && a!=6){
      String s = value.substring(0,a-1)+moveThis+value.charAt(a-1)+value.substring(a+1);
      return s;
    }
    else
      return value;
  }
  
  private boolean west(String value, char moveThis, String[] goal){
    String s = west(value, moveThis);
    if (!s.equals(value)){
      add(s,myMap.get(value)+1,Moves.WEST);
      for (int i=0; i<goal.length; i++){
        if(s.equals(goal[i])) {
          //System.out.println("Solution Exists at Level "+myMap.get(s)+" of the tree, after moving the space WEST");
          arrivedAtGoal = goal[i];
          return true;
        }
      }
    }
    return false;
  }
  
  private String east(String value, char moveThis){
    int a = value.indexOf(moveThis);
    if(a!=2 && a!=5 && a!=8){
      String s = value.substring(0,a)+value.charAt(a+1)+moveThis+value.substring(a+2);
      return s;
    }
    else 
      return value;
  }
  
  private boolean east(String value, char moveThis, String[] goal){
    String s = east(value, moveThis);
    if (!s.equals(value)){
      add(s,myMap.get(value)+1,Moves.EAST);
      for (int i=0; i<goal.length; i++){
        if(s.equals(goal[i])) {
          arrivedAtGoal = goal[i];
          return true;
        }
      }
    }
    return false;
  }
  
  private void routeOutline(String state, Moves a, String initialPosition, ArrayList<Moves> steps) {
    String s;
    if (a == Moves.NORTH)
      s = south(state, '0');
    else if (a == Moves.SOUTH)
      s = north(state, '0');
    else if (a == Moves.WEST)
      s = east(state, '0');
    else if (a == Moves.EAST)
      s = west(state, '0');
    else
      s = state;
    
    if (!s.equals(initialPosition))
      routeOutline(s, edges.get(s), initialPosition, steps);
    steps.add(a);
  }
        String current= args[0];
    
        Moves[] steps =  solve(current, possibleResults);
        
      
  
        for (int i=0; i<steps.length; i++)
        System.out.println(instructions(Moves[i]);
   
}